defmodule Groupchat.Repo.Migrations.AddOpenAIAsstants do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:assistants, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :openai_assistant_id, :text, null: false
      add :name, :text
      add :description, :text
      add :model, :text
      add :tools, :map
      add :instructions, :text
      add :metadata, :map

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end
  end

  def down do
    Groupchat.Repo.all(Groupchat.OpenAI.Assistant)
    |> Enum.each(fn asst ->
      Groupchat.OpenAIApi.AssistantsApi.delete(asst.openai_assistant_id)
    end)

    drop table(:assistants)
  end
end
